"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.agentFromProxy = agentFromProxy;
exports.proxyObjectToString = proxyObjectToString;
exports.proxyStringToObject = proxyStringToObject;

var _url = require("url");

var _httpsProxyAgent = _interopRequireDefault(require("https-proxy-agent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function serializeAuth({
  username,
  password
} = {}) {
  if (!username) {
    return '';
  }

  if (!password) {
    return username;
  }

  return `${username}:${password}`;
}

function proxyStringToObject(proxyString) {
  if (!proxyString.startsWith('http')) {
    return proxyStringToObject(`http://${proxyString}`);
  }

  const parsedUrl = new _url.URL(proxyString);
  const host = parsedUrl.hostname;
  const portString = parsedUrl.port;
  const protocol = parsedUrl.protocol;
  const auth = {
    username: parsedUrl.username,
    password: parsedUrl.password
  };
  const port = parseInt(portString);
  const isHttps = protocol === 'https:';

  if (!auth.username) {
    return {
      host,
      port,
      isHttps
    };
  }

  return {
    host,
    isHttps,
    port,
    auth
  };
}

function proxyObjectToString(proxyObject) {
  const {
    host: hostname,
    port,
    auth: authObject
  } = proxyObject;
  const auth = serializeAuth(authObject);
  const formatted = (0, _url.format)({
    hostname,
    port,
    auth
  }); // Ugly fix for Node 6 vs Node 8 behavior

  return formatted.replace(/^\/\//, '');
}

function agentFromProxy(proxy) {
  if (!proxy) {
    return {};
  }

  ['http_proxy', 'https_proxy'].forEach(envStr => {
    delete process.env[envStr];
    delete process.env[envStr.toUpperCase()];
  });
  const {
    host,
    port,
    protocol
  } = proxy;
  const agent = new _httpsProxyAgent.default({
    host,
    port,
    protocol
  });
  return agent;
}